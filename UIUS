-- MobileUILib.lua (整合 UIUS v1.0)
-- 一个简单的 Roblox 手机版 UI 库，优化自适应屏幕。整合 UIUS 实用函数。

local MobileUILib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local LocalPlayer = Players.LocalPlayer

-- 主题定义
local Themes = {
    Light = {
        Background = Color3.fromRGB(255, 255, 255),
        Frame = Color3.fromRGB(245, 245, 245),
        Text = Color3.fromRGB(0, 0, 0),
        Accent = Color3.fromRGB(0, 122, 255),
        Border = Color3.fromRGB(200, 200, 200)
    },
    Dark = {
        Background = Color3.fromRGB(30, 30, 30),
        Frame = Color3.fromRGB(50, 50, 50),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(100, 200, 255),
        Border = Color3.fromRGB(70, 70, 70)
    }
}

-- UIUS: 创建基本 Frame（手机版自适应）
function MobileUILib:CreateFrame(parent, name, size, position, backgroundColor, borderSize, borderColor, theme)
    theme = theme or Themes.Dark
    local frame = Instance.new("Frame")
    frame.Name = name or "Frame"
    frame.Size = size or UDim2.fromScale(0.9, 0.1)  -- 默认自适应
    frame.Position = position or UDim2.fromScale(0, 0)
    frame.BackgroundColor3 = backgroundColor or theme.Background
    frame.BorderSizePixel = borderSize or 0
    frame.BorderColor3 = borderColor or theme.Border
    frame.Parent = parent
    return frame
end

-- UIUS: 添加标签（手机版自适应）
function MobileUILib:AddLabel(parent, text, size, position, textColor, textSize, theme)
    theme = theme or Themes.Dark
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = size or UDim2.fromScale(1, 0.5)
    label.Position = position or UDim2.fromScale(0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or ""
    label.TextColor3 = textColor or theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.TextSize = textSize or 18  -- 手机版字体大小
    label.Parent = parent
    return label
end

-- UIUS: 创建滚动 Frame（手机版优化）
function MobileUILib:CreateScrollingFrame(parent, size, position, canvasSize, backgroundColor, theme)
    theme = theme or Themes.Dark
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "ScrollingFrame"
    scrollFrame.Size = size or UDim2.fromScale(1, 1)
    scrollFrame.Position = position or UDim2.fromScale(0, 0)
    scrollFrame.CanvasSize = canvasSize or UDim2.fromScale(0, 0)
    scrollFrame.BackgroundColor3 = backgroundColor or theme.Frame
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6  -- 移动端友好
    scrollFrame.Parent = parent
    return scrollFrame
end

-- UIUS: 创建 Tween
function MobileUILib:CreateTween(element, properties, time, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        time or 0.5,
        Enum.EasingStyle[easingStyle or "Quad"],
        Enum.EasingDirection[easingDirection or "Out"]
    )
    local tween = TweenService:Create(element, tweenInfo, properties)
    return tween
end

-- UIUS: 绑定值到 UI 元素
function MobileUILib:BindValue(element, property, value)
    if typeof(element) == "Instance" and element:IsA("GuiObject") then
        element[property] = value
    end
end

-- UIUS: 更新玩家统计（示例：健康值）
function MobileUILib:UpdatePlayerStats(label, player)
    player = player or LocalPlayer
    local character = player.Character
    if character and character:FindFirstChild("Humanoid") then
        local health = character.Humanoid.Health
        label.Text = "健康: " .. math.floor(health)
    end
end

-- 原有：创建主窗口（增强 UIUS 整合）
function MobileUILib:CreateWindow(title, theme)
    theme = theme or "Dark"
    local themeData = Themes[theme]
    
    -- 创建 ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "MobileUI"
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    screenGui.IgnoreGuiInset = true
    
    -- 主 Frame（使用 UIUS CreateFrame）
    local mainFrame = self:CreateFrame(screenGui, "MainFrame", UDim2.fromScale(0.9, 0.8), UDim2.fromScale(0.05, 0.1), themeData.Background, 0, themeData.Border, themeData)
    
    -- 圆角
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame
    
    -- 标题栏（使用 UIUS AddLabel）
    local titleBar = self:CreateFrame(mainFrame, "TitleBar", UDim2.fromScale(1, 0.08), UDim2.fromScale(0, 0), themeData.Accent, 0, themeData.Border, themeData)
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    local titleLabel = self:AddLabel(titleBar, title, UDim2.fromScale(1, 1), UDim2.fromScale(0, 0), themeData.Text, 20, themeData)
    
    -- 滚动内容区域（使用 UIUS CreateScrollingFrame）
    local scrollFrame = self:CreateScrollingFrame(mainFrame, UDim2.fromScale(1, 0.92), UDim2.fromScale(0, 0.08), UDim2.fromScale(0, 0), themeData.Frame, themeData)
    
    local listLayout = Instance.new("UIListLayout")
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0, 8)
    listLayout.Parent = scrollFrame
    
    -- 拖拽支持
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    titleBar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
    
    local window = {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        ScrollFrame = scrollFrame,
        Theme = themeData,
        UpdateCanvas = function()
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y + 20)
        end
    }
    
    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(window.UpdateCanvas)
    
    return window
end

-- 原有：添加按钮（增强 UIUS AddButton）
function MobileUILib:AddButton(window, text, callback)
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.Size = UDim2.fromScale(1, 0.06)
    button.BackgroundColor3 = window.Theme.Frame
    button.Text = text
    button.TextColor3 = window.Theme.Text
    button.TextScaled = true
    button.Font = Enum.Font.Gotham
    button.BorderSizePixel = 0
    button.Parent = window.ScrollFrame
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local hoverTween = self:CreateTween(button, {BackgroundColor3 = window.Theme.Accent}, 0.2, "Quad", "Out")
    local normalTween = self:CreateTween(button, {BackgroundColor3 = window.Theme.Frame}, 0.2, "Quad", "In")
    
    button.MouseButton1Click:Connect(function()
        hoverTween:Play()
        hoverTween.Completed:Connect(function()
            normalTween:Play()
        end)
        callback()
    end)
    
    button.TouchTap:Connect(callback)
    
    window.UpdateCanvas()
    return button
end

-- 原有：添加滑块（不变）
function MobileUILib:AddSlider(window, text, min, max, default, callback)
    min = min or 0
    max = max or 100
    default = default or min
    
    local container = Instance.new("Frame")
    container.Name = "SliderContainer"
    container.Size = UDim2.fromScale(1, 0.08)
    container.BackgroundTransparency = 1
    container.Parent = window.ScrollFrame
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.fromScale(1, 0.4)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. default
    label.TextColor3 = window.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = "Slider"
    sliderFrame.Size = UDim2.fromScale(1, 0.3)
    sliderFrame.Position = UDim2.fromScale(0, 0.4)
    sliderFrame.BackgroundColor3 = window.Theme.Border
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = container
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 4)
    sliderCorner.Parent = sliderFrame
    
    local fill = Instance.new("Frame")
    fill.Name = "Fill"
    fill.Size = UDim2.fromScale((default - min) / (max - min), 1)
    fill.BackgroundColor3 = window.Theme.Accent
    fill.BorderSizePixel = 0
    fill.Parent = sliderFrame
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 4)
    fillCorner.Parent = fill
    
    local draggingSlider = false
    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSlider = true
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local relativeX = math.clamp((input.Position.X - sliderFrame.AbsolutePosition.X) / sliderFrame.AbsoluteSize.X, 0, 1)
            local value = math.floor(min + relativeX * (max - min))
            fill.Size = UDim2.fromScale(relativeX, 1)
            label.Text = text .. ": " .. value
            callback(value)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSlider = false
        end
    end)
    
    window.UpdateCanvas()
    return container
end

-- 原有：添加切换按钮（不变）
function MobileUILib:AddToggle(window, text, default, callback)
    default = default or false
    
    local container = Instance.new("Frame")
    container.Name = "ToggleContainer"
    container.Size = UDim2.fromScale(1, 0.06)
    container.BackgroundTransparency = 1
    container.Parent = window.ScrollFrame
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.fromScale(0.8, 1)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = window.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "Toggle"
    toggleButton.Size = UDim2.fromScale(0.15, 0.6)
    toggleButton.Position = UDim2.fromScale(0.82, 0.2)
    toggleButton.BackgroundColor3 = default and window.Theme.Accent or window.Theme.Border
    toggleButton.Text = ""
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = container
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 20)
    toggleCorner.Parent = toggleButton
    
    local function updateToggle(value)
        toggleButton.BackgroundColor3 = value and window.Theme.Accent or window.Theme.Border
        callback(value)
    end
    
    toggleButton.MouseButton1Click:Connect(function()
        default = not default
        updateToggle(default)
    end)
    
    toggleButton.TouchTap:Connect(function()
        default = not default
        updateToggle(default)
    end)
    
    window.UpdateCanvas()
    return container
end

-- 原有：添加输入框（不变）
function MobileUILib:AddInput(window, text, placeholder, callback)
    local container = Instance.new("Frame")
    container.Name = "InputContainer"
    container.Size = UDim2.fromScale(1, 0.08)
    container.BackgroundTransparency = 1
    container.Parent = window.ScrollFrame
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.fromScale(1, 0.4)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = window.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local inputBox = Instance.new("TextBox")
    inputBox.Name = "Input"
    inputBox.Size = UDim2.fromScale(1, 0.4)
    inputBox.Position = UDim2.fromScale(0, 0.4)
    inputBox.BackgroundColor3 = window.Theme.Frame
    inputBox.Text = placeholder or ""
    inputBox.PlaceholderText = placeholder or "输入文本..."
    inputBox.TextColor3 = window.Theme.Text
    inputBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    inputBox.TextScaled = true
    inputBox.Font = Enum.Font.Gotham
    inputBox.BorderSizePixel = 0
    inputBox.Parent = container
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 6)
    inputCorner.Parent = inputBox
    
    inputBox.FocusLost:Connect(function(enterPressed)
        callback(inputBox.Text)
        if enterPressed then
            inputBox.Text = ""
        end
    end)
    
    window.UpdateCanvas()
    return container
end

-- 原有：添加下拉菜单（不变）
function MobileUILib:AddDropdown(window, text, options, defaultIndex, callback)
    options = options or {}
    defaultIndex = defaultIndex or 1
    local selectedValue = options[defaultIndex] or "无选项"
    
    local container = Instance.new("Frame")
    container.Name = "DropdownContainer"
    container.Size = UDim2.fromScale(1, 0.08)
    container.BackgroundTransparency = 1
    container.Parent = window.ScrollFrame
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.fromScale(1, 0.4)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = window.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Name = "DropdownButton"
    dropdownButton.Size = UDim2.fromScale(1, 0.4)
    dropdownButton.Position = UDim2.fromScale(0, 0.4)
    dropdownButton.BackgroundColor3 = window.Theme.Frame
    dropdownButton.Text = selectedValue .. " ▼"
    dropdownButton.TextColor3 = window.Theme.Text
    dropdownButton.TextScaled = true
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Parent = container
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdownButton
    
    local dropdownList = Instance.new("ScrollingFrame")
    dropdownList.Name = "DropdownList"
    dropdownList.Size = UDim2.fromScale(1, 0)
    dropdownList.Position = UDim2.fromScale(0, 0.08)
    dropdownList.BackgroundColor3 = window.Theme.Frame
    dropdownList.BackgroundTransparency = 1
    dropdownList.BorderSizePixel = 0
    dropdownList.ScrollBarThickness = 4
    dropdownList.CanvasSize = UDim2.fromScale(0, 0)
    dropdownList.Visible = false
    dropdownList.Parent = container
    
    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 6)
    listCorner.Parent = dropdownList
    
    local optionLayout = Instance.new("UIListLayout")
    optionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionLayout.Padding = UDim.new(0, 2)
    optionLayout.Parent = dropdownList
    
    local function createOptions()
        for i, option in ipairs(options) do
            local optionBtn = Instance.new("TextButton")
            optionBtn.Name = "Option" .. i
            optionBtn.Size = UDim2.fromScale(1, 0.12)
            optionBtn.BackgroundColor3 = window.Theme.Border
            optionBtn.Text = option
            optionBtn.TextColor3 = window.Theme.Text
            optionBtn.TextScaled = true
            optionBtn.Font = Enum.Font.Gotham
            optionBtn.BorderSizePixel = 0
            optionBtn.Parent = dropdownList
            
            local optCorner = Instance.new("UICorner")
            optCorner.CornerRadius = UDim.new(0, 4)
            optCorner.Parent = optionBtn
            
            optionBtn.MouseButton1Click:Connect(function()
                selectedValue = option
                dropdownButton.Text = selectedValue .. " ▼"
                dropdownList.Visible = false
                callback(option, i)
                window.UpdateCanvas()
            end)
            
            optionBtn.TouchTap:Connect(function()
                selectedValue = option
                dropdownButton.Text = selectedValue .. " ▼"
                dropdownList.Visible = false
                callback(option, i)
                window.UpdateCanvas()
            end)
        end
        dropdownList.CanvasSize = UDim2.new(0, 0, 0, optionLayout.AbsoluteContentSize.Y + 4)
    end
    
    createOptions()
    
    local isOpen = false
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownList.Visible = isOpen
        if isOpen then
            dropdownList.Size = UDim2.fromScale(1, math.min(#options * 0.12, 0.3))
        else
            dropdownList.Size = UDim2.fromScale(1, 0)
        end
        self:CreateTween(dropdownButton, {Rotation = isOpen and 180 or 0}, 0.2):Play()
        window.UpdateCanvas()
    end)
    
    dropdownButton.TouchTap:Connect(function()
        isOpen = not isOpen
        dropdownList.Visible = isOpen
        if isOpen then
            dropdownList.Size = UDim2.fromScale(1, math.min(#options * 0.12, 0.3))
        else
            dropdownList.Size = UDim2.fromScale(1, 0)
        end
        self:CreateTween(dropdownButton, {Rotation = isOpen and 180 or 0}, 0.2):Play()
        window.UpdateCanvas()
    end)
    
    UserInputService.InputBegan:Connect(function(input)
        if isOpen and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            local mousePos = UserInputService:GetMouseLocation()
            if not (dropdownList.AbsolutePosition.X <= mousePos.X and mousePos.X <= dropdownList.AbsolutePosition.X + dropdownList.AbsoluteSize.X and
                    dropdownList.AbsolutePosition.Y <= mousePos.Y and mousePos.Y <= dropdownList.AbsolutePosition.Y + dropdownList.AbsoluteSize.Y) then
                isOpen = false
                dropdownList.Visible = false
                dropdownList.Size = UDim2.fromScale(1, 0)
                window.UpdateCanvas()
            end
        end
    end)
    
    window.UpdateCanvas()
    return container
end

-- 原有：切换主题（增强：更新所有 Frame/Label）
function MobileUILib:SwitchTheme(window, newTheme)
    local themeData = Themes[newTheme]
    window.Theme = themeData
    window.MainFrame.BackgroundColor3 = themeData.Background
    -- 简单更新：可扩展为递归更新子元素
    for _, child in ipairs(window.ScrollFrame:GetChildren()) do
        if child:IsA("Frame") then
            child.BackgroundColor3 = themeData.Frame
        elseif child:IsA("TextLabel") then
            child.TextColor3 = themeData.Text
        end
    end
    print("主题切换到: " .. newTheme)
end

-- 原有：销毁窗口
function MobileUILib:Destroy(window)
    window.ScreenGui:Destroy()
end

return MobileUILib
