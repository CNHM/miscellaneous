-- MobileUILib.lua (模仿 Obsidian UI)
-- Roblox 手机版 UI 库，模仿 Obsidian：暗黑主题、动画、Tab/Groupbox 等。

local MobileUILib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- 主题定义（模仿 Obsidian Dark：深灰渐变 + 阴影）
local Themes = {
    Dark = {  -- 默认 Obsidian 风格
        Background = Color3.fromRGB(25, 25, 25),
        Frame = Color3.fromRGB(45, 45, 45),
        Text = Color3.fromRGB(255, 255, 255),
        Accent = Color3.fromRGB(100, 150, 255),
        Border = Color3.fromRGB(60, 60, 60),
        Shadow = Color3.fromRGB(0, 0, 0)
    },
    Light = {
        Background = Color3.fromRGB(255, 255, 255),
        Frame = Color3.fromRGB(245, 245, 245),
        Text = Color3.fromRGB(0, 0, 0),
        Accent = Color3.fromRGB(0, 122, 255),
        Border = Color3.fromRGB(200, 200, 200),
        Shadow = Color3.fromRGB(150, 150, 150)
    }
}

local function addShadow(parent, theme)
    local stroke = Instance.new("UIStroke")
    stroke.Color = theme.Shadow
    stroke.Thickness = 2
    stroke.Transparency = 0.5
    stroke.Parent = parent
    -- 简单阴影效果（可扩展为 ImageLabel 模糊）
end

local function addGradient(parent, theme)
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, theme.Background),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(theme.Background.r * 255 - 10, theme.Background.g * 255 - 10, theme.Background.b * 255 - 10))
    }
    gradient.Parent = parent
end

-- 创建主窗口（添加 Tab 支持）
function MobileUILib:CreateWindow(title, theme)
    theme = theme or "Dark"
    local themeData = Themes[theme]
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ObsidianUI"
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
    screenGui.IgnoreGuiInset = true
    
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.fromScale(0.9, 0.8)
    mainFrame.Position = UDim2.fromScale(0.05, 0.1)
    mainFrame.BackgroundColor3 = themeData.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    addGradient(mainFrame, themeData)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = mainFrame
    addShadow(mainFrame, themeData)
    
    -- 标题栏
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.fromScale(1, 0.08)
    titleBar.BackgroundColor3 = themeData.Accent
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    addGradient(titleBar, {Background = themeData.Accent})
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.fromScale(1, 1)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title
    titleLabel.TextColor3 = Color3.new(1,1,1)
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.Parent = titleBar
    
    -- Tab 栏（模仿 Obsidian TabBox）
    local tabFrame = Instance.new("Frame")
    tabFrame.Name = "TabFrame"
    tabFrame.Size = UDim2.fromScale(1, 0.07)
    tabFrame.Position = UDim2.fromScale(0, 0.08)
    tabFrame.BackgroundTransparency = 1
    tabFrame.Parent = mainFrame
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.Padding = UDim.new(0, 5)
    tabLayout.Parent = tabFrame
    
    -- 内容区域（每个 Tab 一个 ScrollingFrame）
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "ContentFrame"
    contentFrame.Size = UDim2.fromScale(1, 0.85)
    contentFrame.Position = UDim2.fromScale(0, 0.15)
    contentFrame.BackgroundTransparency = 1
    contentFrame.Parent = mainFrame
    
    local tabs = {}
    local currentTab = nil
    
    local function createTab(name)
        local tabButton = Instance.new("TextButton")
        tabButton.Name = name
        tabButton.Size = UDim2.fromScale(0.2, 1)  -- 自适应
        tabButton.BackgroundColor3 = themeData.Frame
        tabButton.Text = name
        tabButton.TextColor3 = themeData.Text
        tabButton.TextScaled = true
        tabButton.Font = Enum.Font.Gotham
        tabButton.BorderSizePixel = 0
        tabButton.Parent = tabFrame
        
        local tabCorner = Instance.new("UICorner")
        tabCorner.CornerRadius = UDim.new(0, 6)
        tabCorner.Parent = tabButton
        
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = name .. "Content"
        tabContent.Size = UDim2.fromScale(1, 1)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = 6
        tabContent.CanvasSize = UDim2.fromScale(0, 0)
        tabContent.Visible = false
        tabContent.Parent = contentFrame
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 8)
        contentLayout.Parent = tabContent
        
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then currentTab.Visible = false end
            currentTab = tabContent
            tabContent.Visible = true
            -- 动画切换
            TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = themeData.Accent}):Play()
            wait(0.2)
            TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundColor3 = themeData.Frame}):Play()
        end)
        
        tabButton.TouchTap:Connect(function() tabButton.MouseButton1Click:Fire() end)
        
        table.insert(tabs, {Button = tabButton, Content = tabContent, UpdateCanvas = function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + 20)
        end})
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(tabs[#tabs].UpdateCanvas)
        return tabs[#tabs]
    end
    
    -- 拖拽支持（同前）
    local dragging = false; local dragStart, startPos
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true; dragStart = input.Position; startPos = mainFrame.Position
        end
    end)
    titleBar.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then dragging = false end
    end)
    
    -- 水印（Obsidian 风格，右上角）
    local watermark = Instance.new("TextLabel")
    watermark.Name = "Watermark"
    watermark.Size = UDim2.fromScale(0.3, 0.05)
    watermark.Position = UDim2.fromScale(0.65, 0.02)
    watermark.BackgroundTransparency = 1
    watermark.Text = "Obsidian UI v1.0"
    watermark.TextColor3 = themeData.Accent
    watermark.TextScaled = true
    watermark.Font = Enum.Font.Gotham
    watermark.TextXAlignment = Enum.TextXAlignment.Right
    watermark.Parent = titleBar
    
    local lib = {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        Tabs = tabs,
        Theme = themeData,
        CreateTab = createTab,
        AddWatermark = function(text) watermark.Text = text end
    }
    if #tabs > 0 then tabs[1].Content.Visible = true; currentTab = tabs[1].Content end
    return lib
end

-- 添加按钮（增强动画：缩放 + 颜色）
function MobileUILib:AddButton(tab, text, callback, disabled)
    disabled = disabled or false
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.Size = UDim2.fromScale(1, 0.06)
    button.BackgroundColor3 = tab.Theme.Frame
    button.Text = text
    button.TextColor3 = tab.Theme.Text
    button.TextScaled = true
    button.Font = Enum.Font.Gotham
    button.BorderSizePixel = 0
    button.Active = not disabled
    button.Parent = tab.Content
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = button
    addShadow(button, tab.Theme)
    
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
    local function animate(state)
        local props = state and {Size = UDim2.fromScale(1, 0.055), BackgroundColor3 = tab.Theme.Accent} or {Size = UDim2.fromScale(1, 0.06), BackgroundColor3 = tab.Theme.Frame}
        TweenService:Create(button, tweenInfo, props):Play()
    end
    
    button.MouseButton1Click:Connect(function()
        if not disabled then animate(true); callback(); wait(0.2); animate(false) end
    end)
    button.TouchTap:Connect(function() if not disabled then button.MouseButton1Click:Fire() end end)
    button.MouseEnter:Connect(function() if not disabled then animate(true) end end)
    button.MouseLeave:Connect(function() if not disabled then animate(false) end end)
    
    tab.UpdateCanvas()
    return button
end

-- 添加滑块（同前，添加渐变 Fill）
function MobileUILib:AddSlider(tab, text, min, max, default, callback)
    min = min or 0; max = max or 100; default = default or min
    local container = Instance.new("Frame")
    container.Size = UDim2.fromScale(1, 0.08)
    container.BackgroundTransparency = 1
    container.Parent = tab.Content
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.fromScale(1, 0.4)
    label.BackgroundTransparency = 1
    label.Text = text .. ": " .. default
    label.TextColor3 = tab.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.fromScale(1, 0.3)
    sliderFrame.Position = UDim2.fromScale(0, 0.4)
    sliderFrame.BackgroundColor3 = tab.Theme.Border
    sliderFrame.BorderSizePixel = 0
    sliderFrame.Parent = container
    
    local sliderCorner = Instance.new("UICorner")
    sliderCorner.CornerRadius = UDim.new(0, 4)
    sliderCorner.Parent = sliderFrame
    addShadow(sliderFrame, tab.Theme)
    
    local fill = Instance.new("Frame")
    fill.Size = UDim2.fromScale((default - min) / (max - min), 1)
    fill.BackgroundColor3 = tab.Theme.Accent
    fill.BorderSizePixel = 0
    fill.Parent = sliderFrame
    
    addGradient(fill, {Background = tab.Theme.Accent})
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0, 4)
    fillCorner.Parent = fill
    
    local draggingSlider = false
    sliderFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSlider = true
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if draggingSlider and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local relativeX = math.clamp((input.Position.X - sliderFrame.AbsolutePosition.X) / sliderFrame.AbsoluteSize.X, 0, 1)
            local value = math.floor(min + relativeX * (max - min))
            fill.Size = UDim2.fromScale(relativeX, 1)
            label.Text = text .. ": " .. value
            callback(value)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSlider = false
        end
    end)
    
    tab.UpdateCanvas()
    return container
end

-- 添加切换（Toggle，支持依赖）
function MobileUILib:AddToggle(tab, text, default, callback, dependency)
    default = default or false; dependency = dependency or nil  -- dependency: {element, state=true/false}
    local container = Instance.new("Frame")
    container.Size = UDim2.fromScale(1, 0.06)
    container.BackgroundTransparency = 1
    container.Parent = tab.Content
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.fromScale(0.8, 1)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = tab.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.fromScale(0.15, 0.6)
    toggleButton.Position = UDim2.fromScale(0.82, 0.2)
    toggleButton.BackgroundColor3 = default and tab.Theme.Accent or tab.Theme.Border
    toggleButton.Text = ""
    toggleButton.BorderSizePixel = 0
    toggleButton.Parent = container
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 20)
    toggleCorner.Parent = toggleButton
    addShadow(toggleButton, tab.Theme)
    
    local function updateToggle(value)
        TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = value and tab.Theme.Accent or tab.Theme.Border}):Play()
        callback(value)
        if dependency then
            local depElement = dependency.element
            local showWhen = dependency.showWhen or true
            depElement.Visible = (value == showWhen)
        end
    end
    
    toggleButton.MouseButton1Click:Connect(function()
        default = not default
        updateToggle(default)
    end)
    toggleButton.TouchTap:Connect(function() toggleButton.MouseButton1Click:Fire() end)
    
    tab.UpdateCanvas()
    return container
end

-- 添加输入框（同前）
function MobileUILib:AddInput(tab, text, placeholder, callback)
    local container = Instance.new("Frame")
    container.Size = UDim2.fromScale(1, 0.08)
    container.BackgroundTransparency = 1
    container.Parent = tab.Content
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.fromScale(1, 0.4)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = tab.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local inputBox = Instance.new("TextBox")
    inputBox.Size = UDim2.fromScale(1, 0.4)
    inputBox.Position = UDim2.fromScale(0, 0.4)
    inputBox.BackgroundColor3 = tab.Theme.Frame
    inputBox.Text = placeholder or ""
    inputBox.PlaceholderText = placeholder or "输入文本..."
    inputBox.TextColor3 = tab.Theme.Text
    inputBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    inputBox.TextScaled = true
    inputBox.Font = Enum.Font.Gotham
    inputBox.BorderSizePixel = 0
    inputBox.Parent = container
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 6)
    inputCorner.Parent = inputBox
    addShadow(inputBox, tab.Theme)
    
    inputBox.FocusLost:Connect(function(enterPressed)
        callback(inputBox.Text)
        if enterPressed then inputBox.Text = "" end
    end)
    
    tab.UpdateCanvas()
    return container
end

-- 添加下拉菜单（增强：可搜索）
function MobileUILib:AddDropdown(tab, text, options, defaultIndex, callback)
    options = options or {}; defaultIndex = defaultIndex or 1
    local selectedValue = options[defaultIndex] or "无选项"
    
    local container = Instance.new("Frame")
    container.Size = UDim2.fromScale(1, 0.08)
    container.BackgroundTransparency = 1
    container.Parent = tab.Content
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.fromScale(1, 0.4)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = tab.Theme.Text
    label.TextScaled = true
    label.Font = Enum.Font.Gotham
    label.Parent = container
    
    local dropdownButton = Instance.new("TextButton")
    dropdownButton.Size = UDim2.fromScale(1, 0.4)
    dropdownButton.Position = UDim2.fromScale(0, 0.4)
    dropdownButton.BackgroundColor3 = tab.Theme.Frame
    dropdownButton.Text = selectedValue .. " ▼"
    dropdownButton.TextColor3 = tab.Theme.Text
    dropdownButton.TextScaled = true
    dropdownButton.Font = Enum.Font.Gotham
    dropdownButton.BorderSizePixel = 0
    dropdownButton.Parent = container
    
    local dropdownCorner = Instance.new("UICorner")
    dropdownCorner.CornerRadius = UDim.new(0, 6)
    dropdownCorner.Parent = dropdownButton
    addShadow(dropdownButton, tab.Theme)
    
    local dropdownList = Instance.new("ScrollingFrame")
    dropdownList.Size = UDim2.fromScale(1, 0)
    dropdownList.Position = UDim2.fromScale(0, 0.08)
    dropdownList.BackgroundColor3 = tab.Theme.Frame
    dropdownList.BackgroundTransparency = 1
    dropdownList.BorderSizePixel = 0
    dropdownList.ScrollBarThickness = 4
    dropdownList.CanvasSize = UDim2.fromScale(0, 0)
    dropdownList.Visible = false
    dropdownList.Parent = container
    
    local listCorner = Instance.new("UICorner")
    listCorner.CornerRadius = UDim.new(0, 6)
    listCorner.Parent = dropdownList
    addShadow(dropdownList, tab.Theme)
    
    local searchBox = Instance.new("TextBox")  -- 可搜索
    searchBox.Size = UDim2.fromScale(1, 0.2)
    searchBox.BackgroundColor3 = tab.Theme.Border
    searchBox.PlaceholderText = "搜索..."
    searchBox.TextColor3 = tab.Theme.Text
    searchBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    searchBox.TextScaled = true
    searchBox.Font = Enum.Font.Gotham
    searchBox.BorderSizePixel = 0
    searchBox.Parent = dropdownList
    
    local searchCorner = Instance.new("UICorner")
    searchCorner.CornerRadius = UDim.new(0, 4)
    searchCorner.Parent = searchBox
    
    local optionLayout = Instance.new("UIListLayout")
    optionLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionLayout.Padding = UDim.new(0, 2)
    optionLayout.Parent = dropdownList
    
    local optionButtons = {}
    local function createOptions()
        for _, child in ipairs(dropdownList:GetChildren()) do
            if child.Name:find("Option") then child:Destroy() end
        end
        for i, option in ipairs(options) do
            if string.find(string.lower(option), string.lower(searchBox.Text)) then
                local optionBtn = Instance.new("TextButton")
                optionBtn.Name = "Option" .. i
                optionBtn.Size = UDim2.fromScale(1, 0.12)
                optionBtn.BackgroundColor3 = tab.Theme.Border
                optionBtn.Text = option
                optionBtn.TextColor3 = tab.Theme.Text
                optionBtn.TextScaled = true
                optionBtn.Font = Enum.Font.Gotham
                optionBtn.BorderSizePixel = 0
                optionBtn.Parent = dropdownList
                
                local optCorner = Instance.new("UICorner")
                optCorner.CornerRadius = UDim.new(0, 4)
                optCorner.Parent = optionBtn
                addShadow(optionBtn, tab.Theme)
                
                optionBtn.MouseButton1Click:Connect(function()
                    selectedValue = option
                    dropdownButton.Text = selectedValue .. " ▼"
                    dropdownList.Visible = false
                    callback(option, i)
                    tab.UpdateCanvas()
                end)
                optionBtn.TouchTap:Connect(function() optionBtn.MouseButton1Click:Fire() end)
                table.insert(optionButtons, optionBtn)
            end
        end
        dropdownList.CanvasSize = UDim2.new(0, 0, 0, optionLayout.AbsoluteContentSize.Y + 4)
    end
    createOptions()
    
    searchBox:GetPropertyChangedSignal("Text"):Connect(createOptions)
    
    local isOpen = false
    local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad)
    dropdownButton.MouseButton1Click:Connect(function()
        isOpen = not isOpen
        dropdownList.Visible = isOpen
        if isOpen then
            dropdownList.Size = UDim2.fromScale(1, math.min(#options * 0.12 + 0.2, 0.4))
            createOptions()
        else
            dropdownList.Size = UDim2.fromScale(1, 0)
        end
        TweenService:Create(dropdownButton, tweenInfo, {Rotation = isOpen and 180 or 0}):Play()
        tab.UpdateCanvas()
    end)
    dropdownButton.TouchTap:Connect(function() dropdownButton.MouseButton1Click:Fire() end)
    
    -- 点击外部关闭
    UserInputService.InputBegan:Connect(function(input)
        if isOpen and (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            local mousePos = UserInputService:GetMouseLocation()
            local absPos, absSize = dropdownList.AbsolutePosition, dropdownList.AbsoluteSize
            if not (absPos.X <= mousePos.X and mousePos.X <= absPos.X + absSize.X and absPos.Y <= mousePos.Y and mousePos.Y <= absPos.Y + absSize.Y) then
                isOpen = false; dropdownList.Visible = false; dropdownList.Size = UDim2.fromScale(1, 0); tab.UpdateCanvas()
            end
        end
    end)
    
    tab.UpdateCanvas()
    return container
end

-- 新增：GroupBox（分组，支持依赖）
function MobileUILib:AddGroupBox(tab, title, callback)
    local group = Instance.new("Frame")
    group.Name = title .. "Group"
    group.Size = UDim2.fromScale(1, 0.2)  -- 动态调整
    group.BackgroundColor3 = tab.Theme.Border
    group.BorderSizePixel = 0
    group.Parent = tab.Content
    
    local groupCorner = Instance.new("UICorner")
    groupCorner.CornerRadius = UDim.new(0, 8)
    groupCorner.Parent = group
    addShadow(group, tab.Theme)
    
    local groupTitle = Instance.new("TextLabel")
    groupTitle.Size = UDim2.fromScale(1, 0.15)
    groupTitle.BackgroundTransparency = 1
    groupTitle.Text = title
    groupTitle.TextColor3 = tab.Theme.Accent
    groupTitle.TextScaled = true
    groupTitle.Font = Enum.Font.GothamBold
    groupTitle.Parent = group
    
    local groupContent = Instance.new("ScrollingFrame")
    groupContent.Size = UDim2.fromScale(1, 0.85)
    groupContent.Position = UDim2.fromScale(0, 0.15)
    groupContent.BackgroundTransparency = 1
    groupContent.BorderSizePixel = 0
    groupContent.ScrollBarThickness = 4
    groupContent.CanvasSize = UDim2.fromScale(0, 0)
    groupContent.Parent = group
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Padding = UDim.new(0, 5)
    contentLayout.Parent = groupContent
    
    groupContent:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        group.Size = UDim2.fromScale(1, 0.15 + (contentLayout.AbsoluteContentSize.Y / group.AbsoluteSize.X))
        tab.UpdateCanvas()
    end)
    
    callback(groupContent)  -- 回调添加子元素
    tab.UpdateCanvas()
    return group
end

-- 新增：WarningBox
function MobileUILib:AddWarning(tab, text)
    local warnFrame = Instance.new("Frame")
    warnFrame.Size = UDim2.fromScale(1, 0.06)
    warnFrame.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    warnFrame.BorderSizePixel = 0
    warnFrame.Parent = tab.Content
    
    local warnCorner = Instance.new("UICorner")
    warnCorner.CornerRadius = UDim.new(0, 6)
    warnCorner.Parent = warnFrame
    addShadow(warnFrame, {Shadow = Color3.fromRGB(200, 0, 0)})
    
    local warnLabel = Instance.new("TextLabel")
    warnLabel.Size = UDim2.fromScale(1, 1)
    warnLabel.BackgroundTransparency = 1
    warnLabel.Text = "⚠ " .. text
    warnLabel.TextColor3 = Color3.new(1,1,1)
    warnLabel.TextScaled = true
    warnLabel.Font = Enum.Font.Gotham
    warnLabel.Parent = warnFrame
    
    TweenService:Create(warnFrame, TweenInfo.new(0.5, Enum.EasingStyle.Bounce), {Size = UDim2.fromScale(1, 0.07)}):Play()
    
    tab.UpdateCanvas()
    return warnFrame
end

-- 新增：Viewport（3D 图像）
function MobileUILib:AddViewport(tab, model, size)
    size = size or UDim2.fromScale(0.5, 0.2)
    local viewport = Instance.new("ViewportFrame")
    viewport.Size = size
    viewport.BackgroundTransparency = 1
    viewport.Parent = tab.Content
    
    local vpCamera = Instance.new("Camera")
    viewport.CurrentCamera = vpCamera
    
    if model then model:Clone().Parent = viewport end
    
    -- 简单旋转动画
    spawn(function()
        while viewport.Parent do
            vpCamera.CFrame = vpCamera.CFrame * CFrame.Angles(0, math.rad(1), 0)
            RunService.Heartbeat:Wait()
        end
    end)
    
    tab.UpdateCanvas()
    return viewport
end

-- 切换主题（更新阴影/渐变）
function MobileUILib:SwitchTheme(lib, newTheme)
    local themeData = Themes[newTheme]
    lib.Theme = themeData
    lib.MainFrame.BackgroundColor3 = themeData.Background
    -- 更新子元素（简化）
    print("主题切换到: " .. newTheme)
end

-- 销毁
function MobileUILib:Destroy(lib)
    lib.ScreenGui:Destroy()
end

return MobileUILib
