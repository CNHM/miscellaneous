local NotificationLib = {}
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local SoundService = game:GetService("SoundService")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local camera = workspace.CurrentCamera

local screenGui = playerGui:FindFirstChild("NotificationGui") or Instance.new("ScreenGui")
screenGui.Name = "NotificationGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local notificationsFolder = screenGui:FindFirstChild("Notifications") or Instance.new("Folder")
notificationsFolder.Name = "Notifications"
notificationsFolder.Parent = screenGui

local activeNotifications = {}
local spacing = 10
local notificationWidth = 300
local notificationHeight = 80
local cornerRadius = UDim.new(0, 8)
local slideDuration = 0.5
local fadeDuration = 0.3
local maxScreenUsage = 0.8
local defaultSoundId = "rbxassetid://18595195017"

local function getScreenHeight()
	return camera.ViewportSize.Y
end

local function updatePositions()
	local screenHeight = getScreenHeight()
	local maxHeight = screenHeight * maxScreenUsage
	local totalHeight = #activeNotifications * (notificationHeight + spacing) - spacing
	local adjustedSpacing = spacing
	if totalHeight > maxHeight and #activeNotifications > 1 then
		adjustedSpacing = math.max(1, (maxHeight - (#activeNotifications * notificationHeight)) / (#activeNotifications - 1))
	end
	for i, frame in ipairs(activeNotifications) do
		local yOffset = -notificationHeight - 20 - ((#activeNotifications - i) * (notificationHeight + adjustedSpacing))
		local targetPos = UDim2.new(frame.Position.X.Scale, frame.Position.X.Offset, 1, yOffset)
		TweenService:Create(frame, TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = targetPos}):Play()
	end
end

local function createRainbowGradient()
	return ColorSequence.new({
		ColorSequenceKeypoint.new(0, Color3.fromHSV(0, 1, 1)),
		ColorSequenceKeypoint.new(0.17, Color3.fromHSV(0.17, 1, 1)),
		ColorSequenceKeypoint.new(0.33, Color3.fromHSV(0.33, 1, 1)),
		ColorSequenceKeypoint.new(0.5, Color3.fromHSV(0.5, 1, 1)),
		ColorSequenceKeypoint.new(0.66, Color3.fromHSV(0.66, 1, 1)),
		ColorSequenceKeypoint.new(0.83, Color3.fromHSV(0.83, 1, 1)),
		ColorSequenceKeypoint.new(1, Color3.fromHSV(1, 1, 1))
	})
end

local rainbowGradients = {}
local rotationSpeed = 120

RunService.RenderStepped:Connect(function(dt)
	for gradient, alive in pairs(rainbowGradients) do
		if alive and gradient and gradient.Parent and gradient.Parent.Parent then
			gradient.Rotation = (gradient.Rotation + rotationSpeed * dt) % 360
		else
			rainbowGradients[gradient] = nil
		end
	end
end)

local function registerGradient(gradient)
	if gradient and gradient.Parent then
		local initial = math.random() * 360
		gradient.Rotation = initial
		rainbowGradients[gradient] = true
	end
end

local function createNotification(params)
	local title = params.title or "主标题"
	local subtitle = params.subtitle or "副标题"
	local duration = params.duration or 5
	local position = params.position or "right"
	local icon = params.icon
	local soundId = params.soundId or defaultSoundId
	local isRight = position == "right"

	local startX = isRight and UDim2.new(1, 20, 1, -notificationHeight - 20) or UDim2.new(0, -notificationWidth - 20, 1, -notificationHeight - 20)
	local targetX = isRight and UDim2.new(1, -notificationWidth - 20, 1, -notificationHeight - 20) or UDim2.new(0, 20, 1, -notificationHeight - 20)
	local exitX = isRight and UDim2.new(1, 20, 1, -notificationHeight - 20) or UDim2.new(0, -notificationWidth - 20, 1, -notificationHeight - 20)

	local frame = Instance.new("Frame")
	frame.Name = "Notification"
	frame.Size = UDim2.new(0, notificationWidth, 0, notificationHeight)
	frame.Position = startX
	frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	frame.BorderSizePixel = 0
	frame.BackgroundTransparency = 1
	frame.Parent = notificationsFolder

	local corner = Instance.new("UICorner")
	corner.CornerRadius = cornerRadius
	corner.Parent = frame

	local stroke = Instance.new("UIStroke")
	stroke.Color = Color3.new(1, 1, 1)
	stroke.Thickness = 2
	stroke.Parent = frame

	local gradient = Instance.new("UIGradient")
	gradient.Color = createRainbowGradient()
	gradient.Parent = stroke
	registerGradient(gradient)

	local notificationSound = Instance.new("Sound")
	notificationSound.SoundId = soundId
	notificationSound.Volume = 0.5
	notificationSound.Parent = frame

	if icon then
		local iconLabel = Instance.new("ImageLabel")
		iconLabel.Size = UDim2.new(0, 16, 0, 16)
		iconLabel.Position = UDim2.new(0, 10, 0, 5)
		iconLabel.BackgroundTransparency = 1
		iconLabel.Image = type(icon) == "number" and "rbxassetid://" .. tostring(icon) or icon
		iconLabel.Parent = frame
	end

	local titleLabel = Instance.new("TextLabel")
	titleLabel.Size = UDim2.new(0, 240, 0, 18)
	titleLabel.Position = UDim2.new(0, icon and 30 or 10, 0, 5)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.TextColor3 = Color3.new(1, 1, 1)
	titleLabel.TextSize = 14
	titleLabel.Font = Enum.Font.SourceSansBold
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.TextTruncate = Enum.TextTruncate.AtEnd
	titleLabel.Parent = frame

	local subtitleLabel = Instance.new("TextLabel")
	subtitleLabel.Size = UDim2.new(1, -20, 0, 20)
	subtitleLabel.Position = UDim2.new(0, 10, 0, 25)
	subtitleLabel.BackgroundTransparency = 1
	subtitleLabel.Text = subtitle
	subtitleLabel.TextColor3 = Color3.new(1, 1, 1)
	subtitleLabel.TextSize = 16
	subtitleLabel.Font = Enum.Font.SourceSansBold
	subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
	subtitleLabel.TextTruncate = Enum.TextTruncate.AtEnd
	subtitleLabel.Parent = frame

	local progressFrame = Instance.new("Frame")
	progressFrame.Size = UDim2.new(1, -20, 0, 4)
	progressFrame.Position = UDim2.new(0, 10, 1, -10)
	progressFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	progressFrame.BorderSizePixel = 0
	progressFrame.Parent = frame
	Instance.new("UICorner", progressFrame).CornerRadius = UDim.new(0, 2)

	local progressBar = Instance.new("Frame")
	progressBar.Size = UDim2.new(0, 0, 1, 0)
	progressBar.BackgroundColor3 = Color3.fromRGB(100, 200, 100)
	progressBar.BorderSizePixel = 0
	progressBar.Parent = progressFrame
	Instance.new("UICorner", progressBar).CornerRadius = UDim.new(0, 2)

	local timerLabel = Instance.new("TextLabel")
	timerLabel.Size = UDim2.new(0, 40, 0, 20)
	timerLabel.Position = UDim2.new(1, -45, 0, 5)
	timerLabel.BackgroundTransparency = 1
	timerLabel.Text = tostring(duration)
	timerLabel.TextColor3 = Color3.fromRGB(180, 180, 180)
	timerLabel.TextSize = 14
	timerLabel.Font = Enum.Font.SourceSans
	timerLabel.TextXAlignment = Enum.TextXAlignment.Right
	timerLabel.Parent = frame

	local fadeInTween = TweenService:Create(frame, TweenInfo.new(fadeDuration), {BackgroundTransparency = 0})
	local slideInTween = TweenService:Create(frame, TweenInfo.new(slideDuration, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = targetX})
	fadeInTween:Play()
	slideInTween:Play()

	local progressTween = TweenService:Create(progressBar, TweenInfo.new(duration, Enum.EasingStyle.Linear), {Size = UDim2.new(1, 0, 1, 0)})

	local startTime = tick()
	local timerConn
	timerConn = RunService.Heartbeat:Connect(function()
		local remain = math.max(0, duration - (tick() - startTime))
		timerLabel.Text = tostring(math.floor(remain + 0.5))
		if remain <= 0 then
			timerConn:Disconnect()
		end
	end)

	slideInTween.Completed:Connect(function()
		startTime = tick()
		progressTween:Play()
		notificationSound:Play()
		table.insert(activeNotifications, frame)
		updatePositions()
	end)

	progressTween.Completed:Connect(function()
		if timerConn then timerConn:Disconnect() end
		local fadeOutTween = TweenService:Create(frame, TweenInfo.new(fadeDuration), {BackgroundTransparency = 1})
		local slideOutTween = TweenService:Create(frame, TweenInfo.new(slideDuration, Enum.EasingStyle.Quart, Enum.EasingDirection.In), {Position = exitX})
		fadeOutTween:Play()
		slideOutTween:Play()
		slideOutTween.Completed:Connect(function()
			frame:Destroy()
			for i, notif in ipairs(activeNotifications) do
				if notif == frame then
					table.remove(activeNotifications, i)
					break
				end
			end
			updatePositions()
		end)
	end)
end

function NotificationLib.Show(params)
	task.spawn(function()
		createNotification(params)
	end)
end

function NotificationLib.DetectUI()
	updatePositions()
	return {
		activeCount = #activeNotifications,
		screenHeight = getScreenHeight(),
		totalHeight = #activeNotifications * (notificationHeight + spacing) - spacing
	}
end

function NotificationLib.PlaySound(soundId)
	local sound = Instance.new("Sound")
	sound.SoundId = soundId or defaultSoundId
	sound.Volume = 0.5
	sound.Parent = SoundService
	sound:Play()
	sound.Ended:Connect(function()
		sound:Destroy()
	end)
end

return NotificationLib
