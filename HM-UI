local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

local SynthUI = {}
SynthUI.__index = SynthUI

local function createInstance(className, parent, props)
    local instance = Instance.new(className)
    instance.Parent = parent or nil
    
    if props then
        for key, value in pairs(props) do
            if key == "Size" or key == "Position" then
                instance[key] = UDim2.new(value.X.Scale or 0, value.X.Offset or 0, value.Y.Scale or 0, value.Y.Offset or 0)
            elseif key == "AnchorPoint" then
                instance[key] = Vector2.new(value.X or 0, value.Y or 0)
            elseif key == "BackgroundColor3" then
                instance[key] = Color3.fromRGB(value.R or 255, value.G or 255, value.B or 255)
            elseif key == "TextColor3" then
                instance[key] = Color3.fromRGB(value.R or 255, value.G or 255, value.B or 255)
            elseif key == "Font" then
                -- 确保 Enum.Font[value] 存在
                instance[key] = Enum.Font[value] or Enum.Font.Gotham
            elseif key == "TextSize" then
                instance[key] = value
            elseif key == "Transparency" then
                instance[key] = value
            else
                instance[key] = value
            end
        end
    end
    
    -- 为 Frame, Button, TextBox 等添加 UICorner
    if className == "Frame" or className == "TextButton" or className == "ImageButton" or className == "TextBox" then
        local corner = Instance.new("UICorner")
        -- 使用 props.CornerRadius，如果没有则默认为 4
        corner.CornerRadius = UDim.new(0, props and props.CornerRadius or 4) 
        corner.Parent = instance
    end
    
    return instance
end

local function tween(instance, goal, duration, easingStyle)
    local tweenInfo = TweenInfo.new(duration or 0.2, easingStyle or Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
    local tween = TweenService:Create(instance, tweenInfo, goal)
    tween:Play()
    return tween
end

function SynthUI.MakeDraggable(frame, dragHandle)
    dragHandle = dragHandle or frame
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    local function updateInput(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        -- 移除边界限制以简化拖动，但在实际项目中可能需要
        -- local screenSize = workspace.CurrentCamera.ViewportSize
        -- local frameSize = frame.AbsoluteSize
        -- newPos = UDim2.new(math.clamp(newPos.X.Scale, 0, 1 - frameSize.X / screenSize.X), newPos.X.Offset, 
        --                    math.clamp(newPos.Y.Scale, 0, 1 - frameSize.Y / screenSize.Y), newPos.Y.Offset)
        tween(frame, {Position = newPos}, 0.05) -- 调低持续时间以实现更流畅的拖动
    end
    
    dragHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            tween(frame, {Size = frame.Size * 0.99}, 0.1) -- 轻微缩小视觉效果
        end
    end)
    
    dragHandle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            tween(frame, {Size = frame.Size / 0.99}, 0.1) -- 恢复大小
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            updateInput(input)
        end
    end)
end

function SynthUI.createScreenGui(parent, props)
    local gui = createInstance("ScreenGui", parent, props)
    gui.IgnoreGuiInset = props.IgnoreGuiInset or true -- 推荐开启以避免顶部偏移
    return gui
end

function SynthUI.Frame(props, parent)
    local frame = createInstance("Frame", parent, props)
    frame.BorderSizePixel = props.BorderSizePixel or 0
    frame.BackgroundColor3 = props.BackgroundColor3 or Color3.fromRGB(255, 255, 255)
    frame.BackgroundTransparency = props.BackgroundTransparency or 0
    return frame
end

function SynthUI.Label(props, parent)
    local label = createInstance("TextLabel", parent, props)
    label.Text = props.Text or ""
    -- 修正: 默认不使用 TextScaled，使用 TextSize 更精确控制
    label.TextScaled = props.TextScaled or false 
    label.TextSize = props.TextSize or 14
    label.BackgroundTransparency = props.BackgroundTransparency or 1
    label.TextColor3 = props.TextColor3 or Color3.fromRGB(0, 0, 0)
    label.TextXAlignment = props.TextXAlignment or Enum.TextXAlignment.Center
    label.TextYAlignment = props.TextYAlignment or Enum.TextYAlignment.Center
    return label
end

function SynthUI.Button(props, parent)
    local button = createInstance("TextButton", parent, props)
    button.Text = props.Text or "Button"
    button.TextScaled = props.TextScaled or false
    button.TextSize = props.TextSize or 14
    button.BackgroundColor3 = props.BackgroundColor3 or Color3.fromRGB(85, 170, 255)
    button.TextColor3 = props.TextColor3 or Color3.fromRGB(255, 255, 255)
    
    local originalSize = button.Size
    local originalColor = button.BackgroundColor3
    
    button.MouseEnter:Connect(function()
        tween(button, {Size = originalSize * 1.02}, 0.2)
    end)
    button.MouseLeave:Connect(function()
        tween(button, {Size = originalSize}, 0.2)
    end)
    
    button.MouseButton1Click:Connect(function()
        spawn(function()
            tween(button, {BackgroundColor3 = originalColor:Lerp(Color3.new(0,0,0), 0.2)}, 0.1)
            wait(0.1)
            tween(button, {BackgroundColor3 = originalColor}, 0.1)
        end)
        if props.Callback then props.Callback() end
    end)
    
    return button
end

function SynthUI.TextBox(props, parent)
    local textbox = createInstance("TextBox", parent, props)
    textbox.Text = props.Text or ""
    textbox.TextScaled = props.TextScaled or false
    textbox.TextSize = props.TextSize or 14
    textbox.PlaceholderText = props.PlaceholderText or "Enter text..."
    textbox.BackgroundColor3 = props.BackgroundColor3 or Color3.fromRGB(255, 255, 255)
    
    local originalColor = textbox.BackgroundColor3
    
    textbox.Focused:Connect(function()
        tween(textbox, {BackgroundColor3 = originalColor:Lerp(Color3.fromRGB(0,0,0), 0.05)}, 0.2)
    end)
    textbox.FocusLost:Connect(function()
        tween(textbox, {BackgroundColor3 = originalColor}, 0.2)
        if props.FocusLost then props.FocusLost(textbox.Text) end
    end)
    
    return textbox
end

function SynthUI.ImageLabel(props, parent)
    local image = createInstance("ImageLabel", parent, props)
    image.Image = props.Image or ""
    image.ScaleType = Enum.ScaleType.Fit
    -- 移除重复的 UICorner 逻辑，因为它已在 createInstance 中处理
    return image
end

function SynthUI.ImageButton(props, parent)
    local button = createInstance("ImageButton", parent, props)
    button.Image = props.Image or ""
    button.ScaleType = Enum.ScaleType.Fit
    
    local originalSize = button.Size
    
    button.MouseEnter:Connect(function()
        tween(button, {Size = originalSize * 1.05}, 0.2)
    end)
    button.MouseLeave:Connect(function()
        tween(button, {Size = originalSize}, 0.2)
    end)
    
    button.MouseButton1Click:Connect(function()
        if props.Callback then props.Callback() end
    end)
    
    return button
end

function SynthUI.ScrollingFrame(props, parent)
    local scroll = createInstance("ScrollingFrame", parent, props)
    scroll.ScrollBarThickness = props.ScrollBarThickness or 10
    scroll.CanvasSize = props.CanvasSize or UDim2.new(0, 0, 0, 0)
    return scroll
end

function SynthUI.Slider(props, parent)
    local container = SynthUI.Frame({Size = props.Size or UDim2.new(1, 0, 0, 20), BackgroundColor3 = Color3.fromRGB(200, 200, 200), CornerRadius = 10}, parent)
    local bar = SynthUI.Frame({Size = UDim2.new(props.Value or 0.5, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(85, 170, 255), AnchorPoint = Vector2.new(0, 0.5)}, container)
    bar.Position = UDim2.new(bar.Size.X.Scale, 0, 0.5, 0) -- 初始位置基于初始值
    
    local handle = SynthUI.Frame({Size = UDim2.new(0, 10, 0, 20), BackgroundColor3 = Color3.fromRGB(255, 255, 255), AnchorPoint = Vector2.new(0.5, 0.5), CornerRadius = 10}, bar)
    handle.Position = UDim2.new(1, 0, 0.5, 0)
    
    local dragging = false
    local minVal = props.Min or 0
    local maxVal = props.Max or 1
    local step = props.Step or 0
    
    local function updateValue(relX)
        local rawValue = relX * (maxVal - minVal) + minVal
        
        if step > 0 then
            rawValue = math.floor(rawValue / step) * step
        end
        
        local value = math.clamp(rawValue, minVal, maxVal)
        local valueRatio = (value - minVal) / (maxVal - minVal)
        
        tween(bar, {Size = UDim2.new(valueRatio, 0, 1, 0)}, 0.1)
        
        if props.ValueChanged then 
             props.ValueChanged(value) 
        end
    end
    
    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
        end
    end
    
    local function onInputEnded(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end
    
    local function onInputChanged(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local mousePos = input.Position or Players.LocalPlayer:GetMouse().Position
            local relX = math.clamp((mousePos.X - container.AbsolutePosition.X) / container.AbsoluteSize.X, 0, 1)
            updateValue(relX)
        end
    end
    
    -- 绑定拖动事件到容器
    container.InputBegan:Connect(onInputBegan)
    container.InputEnded:Connect(onInputEnded)
    UserInputService.InputChanged:Connect(onInputChanged)
    
    -- 允许直接点击容器来设置值
    container.MouseButton1Down:Connect(function(x, y)
        local mouse = Players.LocalPlayer:GetMouse()
        local relX = math.clamp((mouse.X - container.AbsolutePosition.X) / container.AbsoluteSize.X, 0, 1)
        updateValue(relX)
    end)
    
    -- 初始更新
    updateValue(props.Value or 0.5)
    
    return container
end

function SynthUI.Checkbox(props, parent)
    local container = SynthUI.Frame({Size = UDim2.new(0, 20, 0, 20), BackgroundColor3 = Color3.fromRGB(255, 255, 255), CornerRadius = 4}, parent)
    local check = SynthUI.Frame({Size = UDim2.new(0, 12, 0, 12), BackgroundColor3 = Color3.fromRGB(85, 170, 255), Visible = props.Checked or false, CornerRadius = 2}, container)
    check.Position = UDim2.new(0.5, 0, 0.5, 0)
    check.AnchorPoint = Vector2.new(0.5, 0.5)
    
    local label = SynthUI.Label({Text = props.Text or "", Size = UDim2.new(1, -20, 1, 0), Position = UDim2.new(0, 25, 0, 0), BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = Color3.fromRGB(0, 0, 0)}, parent)
    
    container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            check.Visible = not check.Visible
            tween(container, {BackgroundColor3 = check.Visible and Color3.fromRGB(240, 250, 255) or Color3.fromRGB(255, 255, 255)}, 0.2)
            if props.Callback then props.Callback(check.Visible) end
        end
    end)
    
    return container
end

function SynthUI.Dropdown(props, parent)
    local container = SynthUI.Frame({Size = props.Size or UDim2.new(0, 100, 0, 30), BackgroundColor3 = Color3.fromRGB(255, 255, 255)}, parent)
    local button = SynthUI.Button({Text = props.Items[1] or "Select", Size = UDim2.new(1, 0, 1, 0), Parent = container, BackgroundColor3 = Color3.fromRGB(255, 255, 255), TextColor3 = Color3.fromRGB(0, 0, 0)}, container)
    
    local defaultHeight = (#props.Items > 5 and 5 * 30) or (#props.Items * 30) -- 限制最大高度
    local menu = SynthUI.ScrollingFrame({
        Size = UDim2.new(1, 0, 0, 0), 
        Position = UDim2.new(0, 0, 1, 0), 
        CanvasSize = UDim2.new(0, 0, 0, #props.Items * 30), 
        BackgroundColor3 = Color3.fromRGB(240, 240, 240), 
        Visible = false,
        ZIndex = 2 -- 确保菜单在顶部
    }, container)
    menu.ClipsDescendants = true
    
    local itemIndex = 1
    for i, item in ipairs(props.Items) do
        local itemBtn = SynthUI.Button({
            Text = item, 
            Size = UDim2.new(1, 0, 0, 30), 
            Position = UDim2.new(0, 0, 0, (i-1)*30), 
            BackgroundColor3 = Color3.fromRGB(240, 240, 240),
            TextColor3 = Color3.fromRGB(0, 0, 0),
            Parent = menu
        }, menu)
        itemBtn.ZIndex = 3
        
        itemBtn.MouseButton1Click:Connect(function()
            button.Text = item
            itemIndex = i
            tween(menu, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            wait(0.2)
            menu.Visible = false
            if props.Callback then props.Callback(item, i) end
        end)
    end
    
    button.MouseButton1Click:Connect(function()
        local isOpening = not menu.Visible
        menu.Visible = true
        if isOpening then
            tween(menu, {Size = UDim2.new(1, 0, 0, defaultHeight)}, 0.2)
        else
            tween(menu, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
            wait(0.2)
            menu.Visible = false
        end
    end)
    
    return container
end

function SynthUI.ProgressBar(props, parent)
    local container = SynthUI.Frame({Size = props.Size or UDim2.new(1, 0, 0, 20), BackgroundColor3 = Color3.fromRGB(200, 200, 200), CornerRadius = 10}, parent)
    local bar = SynthUI.Frame({Size = UDim2.new(props.Value or 0, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(85, 170, 255), CornerRadius = 10}, container)
    
    local function update()
        local value = math.clamp(props.Value or 0, 0, 1)
        tween(bar, {Size = UDim2.new(value, 0, 1, 0)}, 0.3)
    end
    update()
    
    -- 注意：Lua 库中 props.OnUpdate 无法直接绑定 Roblox Event。如果需要动态更新，
    -- 需要外部代码直接修改 props.Value 并调用 update 函数。
    
    return container
end

function SynthUI.ToggleSwitch(props, parent)
    local container = SynthUI.Frame({Size = UDim2.new(0, 50, 0, 25), BackgroundColor3 = Color3.fromRGB(200, 200, 200), CornerRadius = 12}, parent)
    local knob = SynthUI.Frame({Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(0, 2, 0.5, -10), BackgroundColor3 = Color3.fromRGB(255, 255, 255), AnchorPoint = Vector2.new(0, 0.5), CornerRadius = 10}, container)
    
    local isOn = props.Default or false
    local function updateState()
        if isOn then
            tween(container, {BackgroundColor3 = Color3.fromRGB(85, 170, 255)}, 0.2)
            tween(knob, {Position = UDim2.new(1, -22, 0.5, 0)}, 0.2) -- 调整 Position
        else
            tween(container, {BackgroundColor3 = Color3.fromRGB(200, 200, 200)}, 0.2)
            tween(knob, {Position = UDim2.new(0, 2, 0.5, 0)}, 0.2) -- 调整 Position
        end
        if props.Callback then props.Callback(isOn) end
    end
    
    container.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isOn = not isOn
            updateState()
        end
    end)
    updateState()
    
    return container
end

function SynthUI.TabFrame(props, parent)
    local container = SynthUI.Frame({Size = props.Size or UDim2.new(1, 0, 1, 0)}, parent)
    local tabs = SynthUI.Frame({Size = UDim2.new(1, 0, 0, 30), BackgroundColor3 = Color3.fromRGB(240, 240, 240)}, container)
    local content = SynthUI.Frame({Size = UDim2.new(1, 0, 1, -30), Position = UDim2.new(0, 0, 0, 30), BackgroundColor3 = Color3.fromRGB(255, 255, 255)}, container)
    content.ClipsDescendants = true -- 确保内容不溢出
    
    local activeTab = 1
    local tabButtons = {}
    
    for i, tabName in ipairs(props.Tabs) do
        local tabBtn = SynthUI.Button({
            Text = tabName, 
            Size = UDim2.new(1 / #props.Tabs, 0, 1, 0), -- 修正 Size 计算
            Position = UDim2.new((i-1) / #props.Tabs, 0, 0, 0), 
            Parent = tabs,
            BackgroundColor3 = Color3.fromRGB(200, 200, 200),
            BackgroundTransparency = (i == activeTab) and 0 or 0.5,
            TextColor3 = Color3.fromRGB(0, 0, 0)
        }, tabs)
        tabButtons[i] = tabBtn
        
        tabBtn.MouseButton1Click:Connect(function()
            activeTab = i
            
            -- 更新按钮透明度
            for j, btn in ipairs(tabButtons) do
                tween(btn, {BackgroundTransparency = (j == i) and 0 or 0.5}, 0.2)
            end
            
            -- 更新内容区
            if props.TabsContent and props.TabsContent[i] then
                for _, child in ipairs(content:GetChildren()) do
                    if child:IsA("GuiBase2d") then
                        child.Visible = false
                    end
                end
                
                local currentContent = props.TabsContent[i]
                currentContent.Parent = content
                currentContent.Size = UDim2.new(1, 0, 1, 0) -- 确保内容占满
                currentContent.Visible = true
            end
        end)
    end
    
    -- 首次加载显示第一个标签内容
    if props.TabsContent and props.TabsContent[1] then
        props.TabsContent[1].Parent = content
        props.TabsContent[1].Size = UDim2.new(1, 0, 1, 0)
    end
    
    return container
end

SynthUI.NotificationManager = {}
SynthUI.NotificationManager.__index = SynthUI.NotificationManager

local ICONS = {
    success = "rbxassetid://6034176210", -- 替换为实际的图标ID或保持占位符
    error = "rbxassetid://6034176255",
    warning = "rbxassetid://6034176231",
    info = "rbxassetid://6034176243"
}

local COLORS = {
    success = {Color3.fromRGB(76, 175, 80), Color3.fromRGB(100, 200, 100)},
    error = {Color3.fromRGB(244, 67, 54), Color3.fromRGB(255, 100, 100)},
    warning = {Color3.fromRGB(255, 193, 7), Color3.fromRGB(255, 220, 100)},
    info = {Color3.fromRGB(33, 150, 243), Color3.fromRGB(100, 180, 255)}
}

function SynthUI.NotificationManager.new(parent)
    local self = setmetatable({}, SynthUI.NotificationManager)
    self.Parent = parent
    self.Notifications = {}
    self.NextY = 10
    return self
end

function SynthUI.NotificationManager:Show(type, title, message, duration)
    local notif = SynthUI.Frame({
        Size = UDim2.new(0, 300, 0, 80),
        Position = UDim2.new(1, -310, 0, self.NextY),
        BackgroundTransparency = 1,
        CornerRadius = 12
    }, self.Parent)
    notif.ZIndex = 5 -- 确保在顶部
    
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, COLORS[type][1]),
        ColorSequenceKeypoint.new(1, COLORS[type][2])
    }
    gradient.Rotation = 45
    gradient.Parent = notif
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(0, 0, 0)
    stroke.Thickness = 2
    stroke.Transparency = 0.5
    stroke.Parent = notif
    
    local icon = SynthUI.ImageLabel({Size = UDim2.new(0, 40, 0, 40), Position = UDim2.new(0, 15, 0.5, 0), Image = ICONS[type] or "", AnchorPoint = Vector2.new(0, 0.5), BackgroundTransparency = 1}, notif)
    
    local titleLabel = SynthUI.Label({Text = title, Position = UDim2.new(0, 65, 0, 10), Size = UDim2.new(1, -100, 0, 20), TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 16, Font = "GothamBold", BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left}, notif)
    local msgLabel = SynthUI.Label({Text = message, Position = UDim2.new(0, 65, 0, 35), Size = UDim2.new(1, -100, 0, 30), TextColor3 = Color3.fromRGB(255, 255, 255), TextSize = 14, BackgroundTransparency = 1, TextXAlignment = Enum.TextXAlignment.Left, TextWrapped = true}, notif)
    
    local closeBtn = SynthUI.Button({Text = "×", Size = UDim2.new(0, 20, 0, 20), Position = UDim2.new(1, -25, 0, 10), TextSize = 18, BackgroundTransparency = 1, TextColor3 = Color3.fromRGB(255, 255, 255)}, notif)
    closeBtn.MouseButton1Click:Connect(function()
        self:Dismiss(notif)
    end)
    
    -- 动画进入
    notif.Size = UDim2.new(0, 300, 0, 80)
    tween(notif, {Position = UDim2.new(1, -310, 0, self.NextY)}, 0.4, Enum.EasingStyle.Back)
    tween(notif, {BackgroundTransparency = 0}, 0.4)
    
    table.insert(self.Notifications, notif)
    self.NextY = self.NextY + 90
    
    spawn(function()
        wait(duration or 3)
        if notif and notif.Parent then -- 避免重复关闭
            self:Dismiss(notif)
        end
    end)
    
    return notif
end

function SynthUI.NotificationManager:Dismiss(notif)
    for i, n in ipairs(self.Notifications) do
        if n == notif then
            table.remove(self.Notifications, i)
            spawn(function()
                -- 动画退出
                tween(notif, {Position = UDim2.new(1, 10, 0, notif.Position.Y.Offset), BackgroundTransparency = 1}, 0.3)
                wait(0.3)
                notif:Destroy()
            end)
            
            -- 重排列剩余通知
            self.NextY = 10
            for _, remaining in ipairs(self.Notifications) do
                tween(remaining, {Position = UDim2.new(1, -310, 0, self.NextY)}, 0.2)
                self.NextY = self.NextY + 90
            end
            break
        end
    end
end

function SynthUI.Modal(props, parent)
    -- 覆盖层
    local overlay = SynthUI.Frame({Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.fromRGB(0, 0, 0), BackgroundTransparency = 1}, parent)
    overlay.ZIndex = 4
    
    -- 对话框主体
    local dialog = SynthUI.Frame({
        Size = props.Size or UDim2.new(0, 300, 0, 200), 
        Position = UDim2.new(0.5, -150, 0.5, -100), 
        BackgroundColor3 = Color3.fromRGB(255, 255, 255), -- 🎯 修正：UI 背景为白色
        BackgroundTransparency = 0, -- 🎯 修正：UI 背景不透明
        CornerRadius = 8
    }, overlay)
    dialog.ZIndex = 5
    
    -- 标题栏
    local titleBar = SynthUI.Frame({Size = UDim2.new(1, 0, 0, 30), BackgroundColor3 = Color3.fromRGB(240, 240, 240)}, dialog)
    titleBar.ClipsDescendants = true
    
    -- 标题
    local title = SynthUI.Label({
        Text = props.Title or "Modal", 
        Size = props.Subtitle and UDim2.new(0.6, 0, 0.5, 0) or UDim2.new(0.6, 0, 1, 0),
        Position = props.Subtitle and UDim2.new(0, 10, 0, 0) or UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1, 
        TextSize = 14, 
        TextColor3 = Color3.fromRGB(0, 0, 0),
        TextScaled = false, -- 🎯 修正：不使用 TextScaled
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = props.Subtitle and Enum.TextYAlignment.Top or Enum.TextYAlignment.Center -- 文本居中
    }, titleBar)
    
    -- 副标题
    if props.Subtitle then
        SynthUI.Label({
            Text = props.Subtitle, 
            Size = UDim2.new(0.6, 0, 0.5, 0), 
            Position = UDim2.new(0, 10, 0.5, 0), 
            BackgroundTransparency = 1, 
            TextSize = 10, 
            TextColor3 = Color3.fromRGB(100, 100, 100), 
            TextScaled = false,
            TextXAlignment = Enum.TextXAlignment.Left
        }, titleBar)
    end
    
    SynthUI.MakeDraggable(dialog, titleBar)
    
    -- 最小化按钮
    local minBtn = SynthUI.Button({
        Text = "▽", -- 🎯 修正：最小化图标 (▽)
        Size = UDim2.new(0, 30, 1, 0), 
        Position = UDim2.new(1, -90, 0, 0), 
        TextSize = 16, 
        BackgroundColor3 = Color3.fromRGB(200, 200, 200), 
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Parent = titleBar
    }, titleBar)
    
    -- 最大化按钮
    local maxBtn = SynthUI.Button({
        Text = "□", -- 最大化图标 (□)
        Size = UDim2.new(0, 30, 1, 0), 
        Position = UDim2.new(1, -60, 0, 0), 
        TextSize = 16, 
        BackgroundColor3 = Color3.fromRGB(200, 200, 200), 
        TextColor3 = Color3.fromRGB(0, 0, 0),
        Parent = titleBar
    }, titleBar)
    
    -- 关闭按钮
    local closeBtn = SynthUI.Button({
        Text = "×", 
        Size = UDim2.new(0, 30, 1, 0), 
        Position = UDim2.new(1, -30, 0, 0), 
        TextSize = 16, 
        BackgroundColor3 = Color3.fromRGB(255, 100, 100), 
        TextColor3 = Color3.fromRGB(255, 255, 255), 
        Parent = titleBar
    }, titleBar)
    
    -- 内容区
    local content = SynthUI.Frame({
        Size = UDim2.new(1, 0, 1, -30), 
        Position = UDim2.new(0, 0, 0, 30), 
        BackgroundColor3 = Color3.fromRGB(255, 255, 255), 
        BackgroundTransparency = 0,
        Parent = dialog
    }, dialog)
    
    local isMaximized = false
    local isMinimized = false -- 🎯 修正：最小化状态
    local originalSize = props.Size or UDim2.new(0, 300, 0, 200)
    local originalPos = dialog.Position -- 初始位置
    local currentOriginalSize = originalSize
    
    -- 关闭逻辑
    closeBtn.MouseButton1Click:Connect(function()
        tween(overlay, {BackgroundTransparency = 1}, 0.2)
        tween(dialog, {Size = UDim2.new(0, 0, 0, 0)}, 0.2)
        spawn(function()
            wait(0.2)
            overlay:Destroy()
            if props.OnClose then props.OnClose() end
        end)
    end)
    
    -- 最小化逻辑
    minBtn.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        content.Visible = not isMinimized
        
        if isMinimized then
            -- 最小化：只显示标题栏
            currentOriginalSize = dialog.Size 
            minBtn.Text = "△" -- 恢复图标 (△)
            -- 保持 X 轴尺寸，Y 轴缩小到标题栏高度
            tween(dialog, {Size = UDim2.new(dialog.Size.X.Scale, dialog.Size.X.Offset, 0, 30)}, 0.2) 
        else
            -- 恢复
            minBtn.Text = "▽" -- 最小化图标 (▽)
            tween(dialog, {Size = currentOriginalSize}, 0.2)
        end
    end)
    
    -- 最大化逻辑
    maxBtn.MouseButton1Click:Connect(function()
        isMaximized = not isMaximized
        
        if isMaximized then
            -- 记录当前位置和尺寸
            currentOriginalSize = dialog.Size
            originalPos = dialog.Position
            
            -- 最大化
            tween(dialog, {Size = UDim2.new(1, 0, 1, 0), Position = UDim2.new(0, 0, 0, 0)}, 0.2)
            maxBtn.Text = "❐" -- 恢复图标
        else
            -- 恢复
            tween(dialog, {Size = currentOriginalSize, Position = originalPos}, 0.2)
            maxBtn.Text = "□" -- 最大化图标
        end
        
        -- 最大化/恢复时，如果处于最小化状态，强制恢复内容可见
        if isMinimized then
             isMinimized = false
             content.Visible = true
             minBtn.Text = "▽"
        end
    end)
    
    -- 初始动画
    overlay.BackgroundTransparency = 1
    dialog.Size = UDim2.new(0, 0, 0, 0)
    tween(overlay, {BackgroundTransparency = 0.5}, 0.3) -- 覆盖层渐变显示
    tween(dialog, {Size = originalSize, Position = originalPos}, 0.3)
    
    if props.Content then
        props.Content.Parent = content
        props.Content.Size = UDim2.new(1, 0, 1, 0)
    end
    
    return overlay
end

function SynthUI.GridLayout(props, parent)
    local grid = Instance.new("UIGridLayout")
    grid.Parent = parent
    grid.CellSize = props.CellSize or UDim2.new(0, 100, 0, 100)
    grid.CellPadding = props.CellPadding or UDim2.new(0, 5, 0, 5)
    return grid
end

function SynthUI.ListLayout(props, parent)
    local list = Instance.new("UIListLayout")
    list.Parent = parent
    list.FillDirection = props.FillDirection or Enum.FillDirection.Vertical
    list.Padding = UDim.new(0, props.Padding or 5)
    list.HorizontalAlignment = props.HorizontalAlignment or Enum.HorizontalAlignment.Left
    list.VerticalAlignment = props.VerticalAlignment or Enum.VerticalAlignment.Top
    return list
end

return SynthUI
