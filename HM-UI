-- 自定义 Roblox UI 库 (HM-UI)
-- 功能：支持窗口、选项卡、按钮、开关、滑块、输入框，带最小化/关闭按钮、拖拽（含边界）、大小调整（全面兼容 PC/移动）及过渡动画
-- 作者：Grok（基于用户需求生成）
-- 版本：3.2
-- 日期：2025-09-27
-- 说明：优化手机版缩放把手大小（增大至 35x35，便于触摸），确保点击响应正常

local CustomUILibrary = {}

-- 服务引用
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- 工具函数：创建圆角
local function applyCorner(instance, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = instance
end

-- 工具函数：创建玻璃质感模糊效果（带兼容性检查）
local function applyBlur(parent, window)
    local success, result = pcall(function()
        return Instance.new("UIBlurEffect")
    end)
    if success then
        local blur = Instance.new("UIBlurEffect")
        blur.Size = 24
        blur.Parent = parent
    else
        parent.BackgroundTransparency = 0.3
        warn("UIBlurEffect 不可用，已使用透明背景替代。")
        if window and window.Notify then
            window:Notify({
                Title = "兼容性提示",
                Content = "当前环境不支持模糊效果，已切换至透明背景。",
                Duration = 5
            })
        end
    end
end

-- 工具函数：绘制圆形按钮
local function drawCircularButton(parent, size, color, strokeColor)
    local button = Instance.new("Frame")
    button.Size = UDim2.new(0, size, 0, size)
    button.BackgroundColor3 = color
    applyCorner(button, size / 2)
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 2
    stroke.Color = strokeColor
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = button
    button.Parent = parent
    return button
end

-- 通知方法（全局定义）
function CustomUILibrary:Notify(notifyConfig)
    local window = self
    if not window or not window.screenGui then return end

    local notifyFrame = Instance.new("Frame")
    notifyFrame.Size = UDim2.new(0, 250, 0, 80)
    notifyFrame.Position = UDim2.new(1, -260, 1, -90)
    notifyFrame.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(20, 20, 20) or Color3.fromRGB(220, 220, 220)
    notifyFrame.BackgroundTransparency = 0.2
    applyCorner(notifyFrame, 8)
    applyBlur(notifyFrame, window)
    notifyFrame.Parent = window.screenGui

    local notifyTitle = Instance.new("TextLabel")
    notifyTitle.Size = UDim2.new(1, -10, 0, 25)
    notifyTitle.Position = UDim2.new(0, 5, 0, 5)
    notifyTitle.Text = notifyConfig.Title or "通知"
    notifyTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
    notifyTitle.BackgroundTransparency = 1
    notifyTitle.TextSize = 16
    notifyTitle.Font = Enum.Font.GothamBold
    notifyTitle.Parent = notifyFrame

    local notifyContent = Instance.new("TextLabel")
    notifyContent.Size = UDim2.new(1, -10, 0, 45)
    notifyContent.Position = UDim2.new(0, 5, 0, 30)
    notifyContent.Text = notifyConfig.Content or ""
    notifyContent.TextColor3 = Color3.fromRGB(200, 200, 200)
    notifyContent.BackgroundTransparency = 1
    notifyContent.TextSize = 12
    notifyContent.Font = Enum.Font.Gotham
    notifyContent.TextWrapped = true
    notifyContent.Parent = notifyFrame

    -- 通知动画
    notifyFrame.Position = UDim2.new(1, 0, 1, -90)
    local tweenIn = TweenService:Create(notifyFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(1, -260, 1, -90)})
    tweenIn:Play()
    wait(notifyConfig.Duration or 3)
    local tweenOut = TweenService:Create(notifyFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Position = UDim2.new(1, 0, 1, -90)})
    tweenOut:Play()
    tweenOut.Completed:Connect(function()
        notifyFrame:Destroy()
    end)
end

-- 主 UI 库：创建窗口
function CustomUILibrary:CreateWindow(config)
    local window = {}
    window.Title = config.Title or "HM-UI 界面"
    window.SubTitle = config.SubTitle or "欢迎使用"
    window.Size = config.Size or UDim2.new(0, 600, 0, 400)
    window.Theme = config.Theme or "Dark"
    window.IsMinimized = false
    window.MinSize = UDim2.new(0, 300, 0, 200)  -- 最小尺寸

    -- 创建主 ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "HMUILibrary"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    screenGui.ResetOnSpawn = false
    window.screenGui = screenGui

    -- 主窗口框架
    local mainFrame = Instance.new("Frame")
    mainFrame.Size = window.Size
    mainFrame.Position = UDim2.new(0.5, -window.Size.X.Offset / 2, 0.5, 100) -- 初始位置用于动画
    mainFrame.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(20, 20, 20) or Color3.fromRGB(220, 220, 220)
    mainFrame.BackgroundTransparency = 0.1
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    applyCorner(mainFrame, 12)
    applyBlur(mainFrame, window)
    mainFrame.Parent = screenGui

    -- 窗口出现动画
    TweenService:Create(mainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, -window.Size.X.Offset / 2, 0.5, -window.Size.Y.Offset / 2)
    }):Play()

    -- 标题栏
    local titleBar = Instance.new("Frame")
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(15, 15, 15) or Color3.fromRGB(200, 200, 200)
    titleBar.BackgroundTransparency = 0.2
    applyCorner(titleBar, 8)
    titleBar.Parent = mainFrame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -100, 1, 0) -- 留出最小化和关闭按钮空间
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.Text = window.Title .. " - " .. window.SubTitle
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.BackgroundTransparency = 1
    titleLabel.TextSize = 16
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = titleBar

    -- 窗口拖拽功能（重做：兼容移动端 Touch 事件）
    local draggingConnection = nil
    local dragging = false
    local dragStart = nil
    local startPos = nil
    local screenSize = workspace.CurrentCamera.ViewportSize

    titleBar.InputBegan:Connect(function(input)
        local inputType = input.UserInputType
        if inputType == Enum.UserInputType.MouseButton1 or inputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            -- 移动端 Touch 结束监听
            draggingConnection = UserInputService.InputEnded:Connect(function(inputEnd)
                local endType = inputEnd.UserInputType
                if endType == Enum.UserInputType.MouseButton1 or endType == Enum.UserInputType.Touch then
                    dragging = false
                    if draggingConnection then
                        draggingConnection:Disconnect()
                        draggingConnection = nil
                    end
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        local inputType = input.UserInputType
        if dragging and (inputType == Enum.UserInputType.MouseMovement or inputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            local newX = math.clamp(startPos.X.Offset + delta.X, 0, screenSize.X - mainFrame.AbsoluteSize.X)
            local newY = math.clamp(startPos.Y.Offset + delta.Y, 0, screenSize.Y - mainFrame.AbsoluteSize.Y)
            mainFrame.Position = UDim2.new(0, newX, 0, newY)
        end
    end)

    -- 最小化按钮（重做：兼容移动端 Touch 事件）
    local minimizeButton = drawCircularButton(titleBar, 25, Color3.fromRGB(200, 200, 0), Color3.fromRGB(150, 150, 0))
    minimizeButton.Position = UDim2.new(1, -85, 0.5, -12.5)
    local minimizeLine = Instance.new("Frame")
    minimizeLine.Size = UDim2.new(0, 12, 0, 2)
    minimizeLine.Position = UDim2.new(0.5, -6, 0.5, -1)
    minimizeLine.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    minimizeLine.Parent = minimizeButton

    local minimizeConnection = nil
    minimizeButton.InputBegan:Connect(function(input)
        local inputType = input.UserInputType
        if inputType == Enum.UserInputType.MouseButton1 or inputType == Enum.UserInputType.Touch then
            minimizeConnection = UserInputService.InputEnded:Connect(function(inputEnd)
                local endType = inputEnd.UserInputType
                if endType == Enum.UserInputType.MouseButton1 or endType == Enum.UserInputType.Touch then
                    if not window.IsMinimized then
                        -- 最小化：隐藏内容，缩小窗口
                        TweenService:Create(tabContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 0, 1, -40)}):Play()
                        TweenService:Create(contentFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 0, 1, -40)}):Play()
                        TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 200, 0, 40)}):Play()
                        window.IsMinimized = true
                        TweenService:Create(minimizeButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundColor3 = Color3.fromRGB(150, 150, 0)}):Play()
                    else
                        -- 还原：显示内容，恢复窗口大小
                        TweenService:Create(tabContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 160, 1, -40)}):Play()
                        TweenService:Create(contentFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(1, -160, 1, -40)}):Play()
                        TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = window.Size}):Play()
                        window.IsMinimized = false
                        TweenService:Create(minimizeButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundColor3 = Color3.fromRGB(200, 200, 0)}):Play()
                    end
                    if minimizeConnection then
                        minimizeConnection:Disconnect()
                        minimizeConnection = nil
                    end
                end
            end)
        end
    end)

    -- 关闭按钮（重做：兼容移动端 Touch 事件）
    local closeButton = drawCircularButton(titleBar, 25, Color3.fromRGB(200, 0, 0), Color3.fromRGB(150, 0, 0))
    closeButton.Position = UDim2.new(1, -35, 0.5, -12.5)
    local closeX1 = Instance.new("Frame")
    closeX1.Size = UDim2.new(0, 12, 0, 2)
    closeX1.Position = UDim2.new(0.5, -6, 0.5, -1)
    closeX1.Rotation = 45
    closeX1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    closeX1.Parent = closeButton
    local closeX2 = Instance.new("Frame")
    closeX2.Size = UDim2.new(0, 12, 0, 2)
    closeX2.Position = UDim2.new(0.5, -6, 0.5, -1)
    closeX2.Rotation = -45
    closeX2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    closeX2.Parent = closeButton

    local closeConnection = nil
    closeButton.InputBegan:Connect(function(input)
        local inputType = input.UserInputType
        if inputType == Enum.UserInputType.MouseButton1 or inputType == Enum.UserInputType.Touch then
            closeConnection = UserInputService.InputEnded:Connect(function(inputEnd)
                local endType = inputEnd.UserInputType
                if endType == Enum.UserInputType.MouseButton1 or endType == Enum.UserInputType.Touch then
                    -- 关闭动画：颜色变化 + 缩放 + 淡出
                    TweenService:Create(closeButton, TweenInfo.new(0.1, Enum.EasingStyle.Sine), {BackgroundColor3 = Color3.fromRGB(255, 50, 50)}):Play()
                    TweenService:Create(mainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                        Size = UDim2.new(0, 0, 0, 0),
                        BackgroundTransparency = 1
                    }):Play()
                    TweenService:Create(closeButton, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {BackgroundColor3 = Color3.fromRGB(200, 0, 0)}):Play()
                    wait(0.3)
                    screenGui:Destroy()
                    if closeConnection then
                        closeConnection:Disconnect()
                        closeConnection = nil
                    end
                end
            end)
        end
    end)

    -- 大小调整把手（右下角小三角，重做：增大至 35x35，便于手机版触摸）
    local resizeHandle = Instance.new("Frame")
    resizeHandle.Size = UDim2.new(0, 35, 0, 35) -- 增大至 35x35，便于触摸但不过大
    resizeHandle.Position = UDim2.new(1, -35, 1, -35)
    resizeHandle.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
    resizeHandle.BackgroundTransparency = 0.5
    applyCorner(resizeHandle, 4)
    local resizeLine1 = Instance.new("Frame")
    resizeLine1.Size = UDim2.new(0, 20, 0, 2)
    resizeLine1.Position = UDim2.new(0, 7, 0, 7)
    resizeLine1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    resizeLine1.Rotation = 45
    resizeLine1.Parent = resizeHandle
    local resizeLine2 = Instance.new("Frame")
    resizeLine2.Size = UDim2.new(0, 20, 0, 2)
    resizeLine2.Position = UDim2.new(0, 7, 0, 17)
    resizeLine2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    resizeLine2.Rotation = 45
    resizeLine2.Parent = resizeHandle
    resizeHandle.Parent = mainFrame

    -- 窗口大小调整功能（重做：兼容移动端 Touch 事件）
    local resizing = false
    local resizingConnection = nil
    local resizeStart = nil
    local startSize = nil
    local startPos = nil

    resizeHandle.InputBegan:Connect(function(input)
        local inputType = input.UserInputType
        if inputType == Enum.UserInputType.MouseButton1 or inputType == Enum.UserInputType.Touch then
            resizing = true
            resizeStart = input.Position
            startSize = mainFrame.Size
            startPos = mainFrame.Position

            resizingConnection = UserInputService.InputEnded:Connect(function(inputEnd)
                local endType = inputEnd.UserInputType
                if endType == Enum.UserInputType.MouseButton1 or endType == Enum.UserInputType.Touch then
                    resizing = false
                    if resizingConnection then
                        resizingConnection:Disconnect()
                        resizingConnection = nil
                    end
                end
            end)
        end
    end)

    resizeHandle.InputChanged:Connect(function(input)
        local inputType = input.UserInputType
        if resizing and (inputType == Enum.UserInputType.MouseMovement or inputType == Enum.UserInputType.Touch) then
            local delta = input.Position - resizeStart
            local newWidth = math.max(window.MinSize.X.Offset, startSize.X.Offset + delta.X)
            local newHeight = math.max(window.MinSize.Y.Offset, startSize.Y.Offset + delta.Y)
            mainFrame.Size = UDim2.new(0, newWidth, 0, newHeight)
            -- 自适应布局：选项卡和内容跟随主窗口大小变化
            tabContainer.Size = UDim2.new(0, math.min(160, newWidth * 0.25), 1, -40)
            contentFrame.Size = UDim2.new(1, -tabContainer.AbsoluteSize.X, 1, -40)
        end
    end)

    -- 选项卡容器
    local tabContainer = Instance.new("Frame")
    tabContainer.Size = UDim2.new(0, 160, 1, -40)
    tabContainer.Position = UDim2.new(0, 0, 0, 40)
    tabContainer.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(25, 25, 25) or Color3.fromRGB(210, 210, 210)
    tabContainer.BackgroundTransparency = 0.3
    applyCorner(tabContainer, 8)
    applyBlur(tabContainer, window)
    tabContainer.Parent = mainFrame

    local tabListLayout = Instance.new("UIListLayout")
    tabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabListLayout.Padding = UDim.new(0, 5)
    tabListLayout.Parent = tabContainer

    -- 内容区域
    local contentFrame = Instance.new("Frame")
    contentFrame.Size = UDim2.new(1, -160, 1, -40)
    contentFrame.Position = UDim2.new(0, 160, 0, 40)
    contentFrame.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(30, 30, 30) or Color3.fromRGB(230, 230, 230)
    contentFrame.BackgroundTransparency = 0.3
    applyCorner(contentFrame, 8)
    applyBlur(contentFrame, window)
    contentFrame.Parent = mainFrame

    -- 存储选项卡
    window.Tabs = {}
    window.CurrentTab = nil

    -- 创建选项卡方法
    function window:Tab(tabConfig)
        local tab = {}
        tab.Title = tabConfig.Title or "选项卡"
        tab.Icon = tabConfig.Icon or ""
        tab.Locked = tabConfig.Locked or false
        tab.Default = tabConfig.Default or false

        local tabButton = Instance.new("TextButton")
        tabButton.Size = UDim2.new(1, -10, 0, 45)
        tabButton.Position = UDim2.new(0, 5, 0, 0)
        tabButton.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(40, 40, 40) or Color3.fromRGB(180, 180, 180)
        tabButton.BackgroundTransparency = 0.4
        tabButton.Text = tab.Icon ~= "" and tab.Icon .. " " .. tab.Title or tab.Title
        tabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabButton.TextSize = 14
        tabButton.Font = Enum.Font.Gotham
        applyCorner(tabButton, 6)
        tabButton.Parent = tabContainer

        local tabContent = Instance.new("Frame")
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.Visible = tab.Default
        tabContent.Parent = contentFrame

        local contentListLayout = Instance.new("UIListLayout")
        contentListLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentListLayout.Padding = UDim.new(0, 8)
        contentListLayout.Parent = tabContent

        tabButton.MouseButton1Click:Connect(function()
            if tab.Locked then
                self:Notify({
                    Title = "错误",
                    Content = "此选项卡已锁定！",
                    Duration = 3
                })
                return
            end
            for _, otherTab in pairs(window.Tabs) do
                otherTab.Content.Visible = false
                TweenService:Create(otherTab.Button, TweenInfo.new(0.3), {BackgroundTransparency = 0.4}):Play()
            end
            tabContent.Visible = true
            TweenService:Create(tabButton, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {BackgroundTransparency = 0.2}):Play()
            TweenService:Create(tabContent, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {BackgroundTransparency = 0}):Play()
            window.CurrentTab = tab
        end)

        function tab:Button(buttonConfig)
            local button = {}
            button.Title = buttonConfig.Title or "按钮"
            button.Desc = buttonConfig.Desc or ""
            button.Icon = buttonConfig.Icon or ""
            button.Locked = buttonConfig.Locked or false
            button.Callback = buttonConfig.Callback or function() end

            local buttonFrame = Instance.new("Frame")
            buttonFrame.Size = UDim2.new(1, -20, 0, 60)
            buttonFrame.Position = UDim2.new(0, 10, 0, 0)
            buttonFrame.BackgroundTransparency = 1
            buttonFrame.Parent = tabContent

            local buttonElement = Instance.new("TextButton")
            buttonElement.Size = UDim2.new(1, 0, 0, 40)
            buttonElement.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(170, 170, 170)
            buttonElement.BackgroundTransparency = 0.5
            buttonElement.Text = button.Icon ~= "" and button.Icon .. " " .. button.Title or button.Title
            buttonElement.TextColor3 = Color3.fromRGB(255, 255, 255)
            buttonElement.TextSize = 14
            buttonElement.Font = Enum.Font.Gotham
            applyCorner(buttonElement, 6)
            buttonElement.Parent = buttonFrame

            local descLabel = Instance.new("TextLabel")
            descLabel.Size = UDim2.new(1, 0, 0, 15)
            descLabel.Position = UDim2.new(0, 0, 0, 45)
            descLabel.BackgroundTransparency = 1
            descLabel.Text = button.Desc
            descLabel.TextColor3 = window.Theme == "Dark" and Color3.fromRGB(180, 180, 180) or Color3.fromRGB(100, 100, 100)
            descLabel.TextSize = 12
            descLabel.Font = Enum.Font.Gotham
            descLabel.Parent = buttonFrame

            buttonElement.MouseButton1Click:Connect(function()
                if button.Locked then
                    self:Notify({
                        Title = "错误",
                        Content = "此按钮已锁定！",
                        Duration = 3
                    })
                    return
                end
                local tween = TweenService:Create(buttonElement, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {BackgroundColor3 = Color3.fromRGB(80, 80, 80), BackgroundTransparency = 0.3})
                tween:Play()
                tween.Completed:Connect(function()
                    TweenService:Create(buttonElement, TweenInfo.new(0.2, Enum.EasingStyle.Sine), {BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(170, 170, 170), BackgroundTransparency = 0.5}):Play()
                end)
                button.Callback()
            end)

            return button
        end

        function tab:Toggle(toggleConfig)
            local toggle = {}
            toggle.Title = toggleConfig.Title or "开关"
            toggle.Desc = toggleConfig.Desc or ""
            toggle.Icon = toggleConfig.Icon or ""
            toggle.Locked = toggleConfig.Locked or false
            toggle.State = toggleConfig.Default or false
            toggle.Callback = toggleConfig.Callback or function(state) end

            local toggleFrame = Instance.new("Frame")
            toggleFrame.Size = UDim2.new(1, -20, 0, 60)
            toggleFrame.Position = UDim2.new(0, 10, 0, 0)
            toggleFrame.BackgroundTransparency = 1
            toggleFrame.Parent = tabContent

            local toggleButton = Instance.new("TextButton")
            toggleButton.Size = UDim2.new(1, 0, 0, 40)
            toggleButton.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(170, 170, 170)
            toggleButton.BackgroundTransparency = 0.5
            toggleButton.Text = toggle.Icon ~= "" and toggle.Icon .. " " .. toggle.Title or toggle.Title
            toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            toggleButton.TextSize = 14
            toggleButton.Font = Enum.Font.Gotham
            applyCorner(toggleButton, 6)
            toggleButton.Parent = toggleFrame

            local toggleIndicator = Instance.new("Frame")
            toggleIndicator.Size = UDim2.new(0, 30, 0, 20)
            toggleIndicator.Position = toggle.State and UDim2.new(1, -40, 0.5, -10) or UDim2.new(1, -70, 0.5, -10)
            toggleIndicator.BackgroundColor3 = toggle.State and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0)
            applyCorner(toggleIndicator, 10)
            toggleIndicator.Parent = toggleButton

            local descLabel = Instance.new("TextLabel")
            descLabel.Size = UDim2.new(1, 0, 0, 15)
            descLabel.Position = UDim2.new(0, 0, 0, 45)
            descLabel.BackgroundTransparency = 1
            descLabel.Text = toggle.Desc
            descLabel.TextColor3 = window.Theme == "Dark" and Color3.fromRGB(180, 180, 180) or Color3.fromRGB(100, 100, 100)
            descLabel.TextSize = 12
            descLabel.Font = Enum.Font.Gotham
            descLabel.Parent = toggleFrame

            toggleButton.MouseButton1Click:Connect(function()
                if toggle.Locked then
                    self:Notify({
                        Title = "错误",
                        Content = "此开关已锁定！",
                        Duration = 3
                    })
                    return
                end
                toggle.State = not toggle.State
                TweenService:Create(toggleIndicator, TweenInfo.new(0.3, Enum.EasingStyle.Sine), {
                    BackgroundColor3 = toggle.State and Color3.fromRGB(0, 200, 0) or Color3.fromRGB(200, 0, 0),
                    Position = toggle.State and UDim2.new(1, -40, 0.5, -10) or UDim2.new(1, -70, 0.5, -10)
                }):Play()
                toggle.Callback(toggle.State)
            end)

            return toggle
        end

        function tab:Slider(sliderConfig)
            local slider = {}
            slider.Title = sliderConfig.Title or "滑块"
            slider.Min = sliderConfig.Min or 0
            slider.Max = sliderConfig.Max or 100
            slider.Default = sliderConfig.Default or 50
            slider.Step = sliderConfig.Step or 1
            slider.Callback = sliderConfig.Callback or function(value) end

            local sliderFrame = Instance.new("Frame")
            sliderFrame.Size = UDim2.new(1, -20, 0, 60)
            sliderFrame.Position = UDim2.new(0, 10, 0, 0)
            sliderFrame.BackgroundTransparency = 1
            sliderFrame.Parent = tabContent

            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 20)
            titleLabel.BackgroundTransparency = 1
            titleLabel.Text = slider.Title
            titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            titleLabel.TextSize = 14
            titleLabel.Font = Enum.Font.Gotham
            titleLabel.Parent = sliderFrame

            local sliderBar = Instance.new("Frame")
            sliderBar.Size = UDim2.new(1, 0, 0, 10)
            sliderBar.Position = UDim2.new(0, 0, 0, 25)
            sliderBar.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(180, 180, 180)
            sliderBar.BackgroundTransparency = 0.5
            applyCorner(sliderBar, 5)
            sliderBar.Parent = sliderFrame

            local sliderFill = Instance.new("Frame")
            sliderFill.Size = UDim2.new(0, 0, 1, 0)
            sliderFill.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(0, 150, 0) or Color3.fromRGB(0, 200, 0)
            applyCorner(sliderFill, 5)
            sliderFill.Parent = sliderBar

            local sliderKnob = Instance.new("Frame")
            sliderKnob.Size = UDim2.new(0, 20, 0, 20)
            sliderKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            applyCorner(sliderKnob, 10)
            sliderKnob.Parent = sliderBar

            local valueLabel = Instance.new("TextLabel")
            valueLabel.Size = UDim2.new(0, 50, 0, 20)
            valueLabel.Position = UDim2.new(1, -60, 0, 25)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Text = tostring(slider.Default)
            valueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            valueLabel.TextSize = 12
            valueLabel.Font = Enum.Font.Gotham
            valueLabel.Parent = sliderFrame

            local function updateSlider(value)
                local percentage = (value - slider.Min) / (slider.Max - slider.Min)
                local barWidth = sliderBar.AbsoluteSize.X
                sliderFill.Size = UDim2.new(0, percentage * barWidth, 1, 0)
                sliderKnob.Position = UDim2.new(percentage, -10, 0.5, -10)
                valueLabel.Text = tostring(math.floor(value))
                slider.Callback(value)
            end

            updateSlider(slider.Default)

            sliderKnob.InputBegan:Connect(function(input)
                local inputType = input.UserInputType
                if inputType == Enum.UserInputType.MouseButton1 or inputType == Enum.UserInputType.Touch then
                    local dragging = true
                    local startPos = UserInputService:GetMouseLocation().X
                    local startValue = slider.Default

                    local function update()
                        if dragging then
                            local delta = (UserInputService:GetMouseLocation().X - startPos) / sliderBar.AbsoluteSize.X * (slider.Max - slider.Min)
                            local newValue = math.clamp(startValue + delta, slider.Min, slider.Max)
                            newValue = math.floor(newValue / slider.Step) * slider.Step
                            updateSlider(newValue)
                        end
                    end

                    UserInputService.InputChanged:Connect(update)
                    sliderKnob.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                            dragging = false
                        end
                    end)
                end
            end)

            return slider
        end

        function tab:TextBox(textBoxConfig)
            local textBox = {}
            textBox.Title = textBoxConfig.Title or "输入框"
            textBox.Placeholder = textBoxConfig.Placeholder or "输入内容..."
            textBox.Callback = textBoxConfig.Callback or function(text) end

            local textBoxFrame = Instance.new("Frame")
            textBoxFrame.Size = UDim2.new(1, -20, 0, 60)
            textBoxFrame.Position = UDim2.new(0, 10, 0, 0)
            textBoxFrame.BackgroundTransparency = 1
            textBoxFrame.Parent = tabContent

            local titleLabel = Instance.new("TextLabel")
            titleLabel.Size = UDim2.new(1, 0, 0, 20)
            titleLabel.BackgroundTransparency = 1
            titleLabel.Text = textBox.Title
            titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            titleLabel.TextSize = 14
            titleLabel.Font = Enum.Font.Gotham
            titleLabel.Parent = textBoxFrame

            local textBoxElement = Instance.new("TextBox")
            textBoxElement.Size = UDim2.new(1, 0, 0, 30)
            textBoxElement.Position = UDim2.new(0, 0, 0, 25)
            textBoxElement.BackgroundColor3 = window.Theme == "Dark" and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(170, 170, 170)
            textBoxElement.BackgroundTransparency = 0.5
            textBoxElement.Text = ""
            textBoxElement.PlaceholderText = textBox.Placeholder
            textBoxElement.TextColor3 = Color3.fromRGB(255, 255, 255)
            textBoxElement.TextSize = 14
            textBoxElement.Font = Enum.Font.Gotham
            applyCorner(textBoxElement, 6)
            textBoxElement.Parent = textBoxFrame

            textBoxElement.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    textBox.Callback(textBoxElement.Text)
                end
            end)

            return textBox
        end

        tab.Button = tabButton
        tab.Content = tabContent
        table.insert(window.Tabs, tab)
        if tab.Default then
            window.CurrentTab = tab
            TweenService:Create(tabButton, TweenInfo.new(0.3), {BackgroundTransparency = 0.2}):Play()
        end
        return tab
    end

    setmetatable(window, { __index = CustomUILibrary })
    return window
end

return CustomUILibrary
